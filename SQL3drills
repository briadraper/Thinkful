SELECT CONCAT(o.owner_id, ', ', o.pet_id) AS owner_pet, visits_count
FROM owners o
LEFT JOIN visits v
ON o.pet_id = v.pet_id
WHERE visits_count >= 3
UNION
SELECT CONCAT(o2.owner_id, ', ', o2.pet_id) AS owner_pet, visits_count
from owners_2 o2
LEFT JOIN visits v
ON o2.pet_id = v.pet_id
WHERE visits_count >= 3
ORDER BY visits_count DESC;
--
SELECT o.owner_id,transaction_id, date, service 
FROM owners o 
LEFT JOIN transactions t 
ON o.pet_id = t.pet_id 
WHERE transaction_id IS NOT NULL 
UNION 
SELECT o2.owner_id,transaction_id, date, service 
FROM owners_2 o2 
LEFT JOIN transactions t 
ON o2.pet_id = t.pet_id 
WHERE transaction_id 
IS NOT NULL 
ORDER BY date, transaction_id
--

WITH max_visits AS
(
	SELECT v.pet_id, MAX(visits_count)
	FROM visits v
	GROUP BY pet_id
)
SELECT o.owner_id, max_visits FROM max_visits 
LEFT JOIN owners o
ON v.pet_id = o.pet_id
ORDER BY max_visits DESC;

 AS max_visits, owner_id 
FROM visits v
LEFT JOIN owner_id o
ORDER BY max_visits DESC

SELECT visits_count AS max_visits, owner_id
from visits v
LEFT JOIN owners o
ON v.pet_id = o.pet_id
ORDER BY max_visits DESC;

SELECT * FROM transactions

SELECT owner_id, t.pet_id, date, service
FROM transactions t
LEFT JOIN owners o
ON t.pet_id = o.pet_id
WHERE date = '2019-06-17' OR service = 'haircut'
ORDER BY date;

SELECT pet_id, service,
CASE
	WHEN service =  'nails' THEN 'gift'
	WHEN service <> 'nails' THEN 'no gift'
	ELSE ' '
END AS get_gift
FROM transactions
ORDER BY get_gift;

SELECT 
COUNT(CASE WHEN date = '2019-06-17' THEN '' END) AS day_one,
COUNT(CASE WHEN date = '2019-06-18' THEN '' END) AS day_two
FROM transactions;

SELECT size, COUNT(size) AS size_count 
FROM 
(
	SELECT * FROM owners
	UNION
	SELECT * FROM owners_2
) all_owners
GROUP BY size
ORDER BY size DESC;

SOLUTIONS

1. Write a query that returns the owner_id of the owners table and the transaction_id and service of the transactions table. 

Sort the results in ascending order according to owner_id. 



SELECT owner_id, transaction_id, service 

FROM transactions LEFT OUTER JOIN owners 

ON owners.pet_id = transactions.pet_id 

ORDER BY owner_id; 

MYANSWER:

SELECT owner_id, transaction_id, service
FROM transactions AS t 
LEFT OUTER JOIN owners AS o
ON t.pet_id = o.pet_id
ORDER BY owner_id;



2. Write a query that returns the owner_id, pet_id, transaction_id, and visits_count fields from their respective tables. 

Do not include records where transaction_id is NULL. Sort in order of transaction_id. 



SELECT owners.owner_id, owners.pet_id, transaction_id, visits_count 

FROM owners 



LEFT OUTER JOIN transactions 

ON owners.pet_id = transactions.pet_id 



LEFT OUTER JOIN visits 

ON transactions.pet_id = visits.pet_id 

WHERE transactions.transaction_id IS NOT NULL 

ORDER BY transactions.transaction_id; 

MYANSWER:
SELECT owner_id, t.pet_id, transaction_id, visits_count
FROM transactions AS t 
LEFT OUTER JOIN owners AS o
ON t.pet_id = o.pet_id
LEFT OUTER JOIN visits as v
on t.pet_id = v.pet_id
ORDER BY transaction_id;




3. Write a query that returns the pet_id and size from the owners table, and the visits_count (as the alias num_visits) from the visits table. 

Keep only the records where dogs had 10 or more visits, and sort by the number of visits in descending order. 



SELECT owners.pet_id, size, visits_count as num_visits 

FROM owners LEFT JOIN visits 

ON owners.pet_id = visits.pet_id 

WHERE visits_count >= 10 

ORDER BY visits_count DESC; 

MYANSWER:
SELECT v.pet_id, size, visits_count AS num_visits
FROM visits AS v 
LEFT OUTER JOIN owners AS o
ON v.pet_id = o.pet_id
WHERE visits_count >= 10
ORDER BY num_visits DESC;


4. There are 2 tables, owners and owners_2, that have information about dog owners. You want the list of all unique dog owners from both tables. 

Combine these 2 tables and return a single field that shows a list of owner_ids from both input tables, and order by owner_id. Keep only unique records. 



SELECT owner_id FROM owners 

UNION 

SELECT owner_id FROM owners_2 

ORDER BY owner_id; 

MYANSWER:
SELECT owner_id FROM owners 
UNION
SELECT owner_id FROM owners_2
ORDER BY owner_id;



5. You're having a customer rewards promotion and you want to identify your top three customers (owner_id) based upon how many visits they've had. 

You also know that some owners have more than one pet, so you want to add up all of their visits across all pets. Once you have this, select the top three customers (owner_id) and list them in descending order according to number of visits (use the alias num_visits)! 



SELECT owner_id, SUM(visits_count) AS num_visits 

FROM owners AS o LEFT OUTER JOIN visits AS v 

ON o.pet_id = v.pet_id 

GROUP BY owner_id 

ORDER BY num_visits DESC 

LIMIT 3; 

MYANSWER:
SELECT owner_id, SUM(visits_count) AS num_visits
FROM visits AS v 
LEFT OUTER JOIN owners AS o
ON v.pet_id = o.pet_id
GROUP BY owner_id
ORDER BY num_visits DESC
LIMIT 3;



6. Write a query that returns owner_id from both the owners and owners_2 tables and include the transaction_id, date and service fields from the transactions table. Sort your results first by date, then by transaction_id. All rows from owners and owners_2 tables should be returned. Do not include records where transaction_id is NULL. 



SELECT owners.owner_id, transaction_id, date, service  

FROM owners LEFT OUTER JOIN transactions 

ON owners.pet_id = transactions.pet_id 

WHERE transaction_id IS NOT NULL 



UNION ALL  



SELECT owners_2.owner_id, transaction_id, date, service  

FROM owners_2 LEFT OUTER JOIN transactions 

ON owners_2.pet_id = transactions.pet_id 

WHERE transaction_id IS NOT NULL 

ORDER BY date, transaction_id; 

MYANSWER:
SELECT o.owner_id,transaction_id, date, service 
FROM owners o 
LEFT JOIN transactions t 
ON o.pet_id = t.pet_id 
WHERE transaction_id IS NOT NULL
UNION 
SELECT o2.owner_id,transaction_id, date, service 
FROM owners_2 o2 
LEFT JOIN transactions t 
ON o2.pet_id = t.pet_id
WHERE transaction_id IS NOT NULL
ORDER BY date, transaction_id;



7. Return a table that includes all records from both owners and owners_2 tables, and include a new field, owner_pet which is formatted as owner_id, pet_id (in other words, the owner id followed by a comma, then a space, then the pet id). Return only the rows where the number of visits is greater than or equal to 3 in descending order. 

Use the CONCAT() function for this operation instead of the concat operator (||), as they behave differently when working with NULL values. 



*HINT: You may notice that the same pet is owned by two different owners. Although uncommon, this is not necessarily an error.* 



SELECT concat(owner_id,', ', owners.pet_id) AS owner_pet, visits_count 

FROM owners LEFT OUTER JOIN visits 

ON owners.pet_id = visits.pet_id 

WHERE visits_count >= 3 



UNION ALL  



SELECT concat(owner_id,', ', owners_2.pet_id) AS owner_pet, visits_count 

FROM owners_2 LEFT OUTER JOIN visits 

ON owners_2.pet_id = visits.pet_id 

WHERE visits_count >= 3 



ORDER BY visits_count DESC, owner_pet; 

MYANSWER:
SELECT CONCAT(o.owner_id, ', ', o.pet_id) AS owner_pet, visits_count
FROM owners o
LEFT JOIN visits v
ON o.pet_id = v.pet_id
WHERE visits_count >= 3
UNION
SELECT CONCAT(o2.owner_id, ', ', o2.pet_id) AS owner_pet, visits_count
from owners_2 o2
LEFT JOIN visits v
ON o2.pet_id = v.pet_id
WHERE visits_count >= 3
ORDER BY visits_count DESC;



8. ### Write a query that returns the maximum number of visits made by an owner and the `owner_id` in descending order of maximum visits. You only need to use the table `owners` for this (you don't need to use `owners_2`). 

*Hint: You may find it useful to create a Common Table Expression (CTE) named `max_num_visits` using a WITH statement in order to create a table with the maximum number of visits (aliased as `max_visits`) per `pet_id`.* 



WITH max_num_visits AS 

(SELECT MAX(visits_count) as max_visits, pet_id 

FROM visits 

GROUP BY pet_id) 



SELECT max_num_visits.max_visits, owner_id 

FROM max_num_visits LEFT OUTER JOIN owners 

ON max_num_visits.pet_id = owners.pet_id 

ORDER BY max_num_visits.max_visits DESC; 

MYANSWER:
SELECT visits_count AS max_visits, owner_id
from visits v
LEFT JOIN owners o
ON v.pet_id = o.pet_id
ORDER BY max_visits DESC;



9. Write a query that returns the owner_id, pet_id, date and service for transactions that happened on June 17th, 2019 or for transactions where the service provided was a haircut. Order your results by date. 



SELECT owner_id, owners.pet_id, date, service 

FROM transactions 

LEFT OUTER JOIN owners 

ON owners.pet_id = transactions.pet_id 

WHERE date = '2019-06-17' OR service = 'haircut' 

ORDER BY date; 

MYANSWER:
SELECT owner_id, t.pet_id, date, service
FROM transactions t
LEFT JOIN owners o
ON t.pet_id = o.pet_id
WHERE date = '2019-06-17' OR service = 'haircut'
ORDER BY date;


10. You have a promotion where you'd like to give a gift to those pets who have had their nails done at the salon. 

Write a query that shows the pet_id and service for those pets that used the nails service from transactions. Then sort by those pets first who are receiving a gift. 

HINT: Use a CASE statement that assigns gift when the service is nails, and otherwise assigns no gift. End your CASE statement with the alias get_gift, and order by this field. 



SELECT pet_id, service, 

  CASE 

    WHEN service = 'nails' THEN 'gift' 

    ELSE 'no gift' 

  END AS get_gift 

FROM transactions 

ORDER BY get_gift; 

MYANSWER:
SELECT pet_id, service,
CASE
	WHEN service =  'nails' THEN 'gift'
	WHEN service <> 'nails' THEN 'no gift'
	ELSE ' '
END AS get_gift
FROM transactions
ORDER BY get_gift;


11. The town where the dog salon is located had a street fair on June 17 and 18. The business owner wants to know how many transactions took place on those days. 

Write a query that counts the number of transactions on '2019-06-17' as day_one and '2019-06-18' as day_two from the transactions table. 

HINT: It's a good idea to use COUNT and CASE in combination here! 



SELECT 

COUNT(CASE WHEN date = '2019-06-17' THEN transaction_id END) AS day_one, 

COUNT(CASE WHEN date = '2019-06-18' THEN transaction_id END) AS day_two 

FROM transactions; 

MYANSWER:
SELECT 
COUNT(CASE WHEN date = '2019-06-17' THEN '' END) AS day_one,
COUNT(CASE WHEN date = '2019-06-18' THEN '' END) AS day_two
FROM transactions;



12. In this final challenge, you want to know how many dogs there are of each size, across both lists of owners. So, you'll want to combine the owners and owners_2 tables first, then get a count for each of the three sizes of dogs, small, medium, and large. Then finally, sort the list from smallest to largest. Your final output will show the size and count. 

HINT: Use the alias all_owners to represent the union of both tables. Then, use the alias size_count to capture the count for each of the sizes. 



WITH all_owners AS 

(SELECT * FROM owners 

UNION ALL 

SELECT * FROM owners_2) 



SELECT size, COUNT(size) AS size_count 

FROM all_owners 

GROUP BY size 

ORDER BY size DESC;

MYANSWER:
SELECT size, COUNT(size) AS size_count 
FROM 
(
	SELECT * FROM owners
	UNION
	SELECT * FROM owners_2
) all_owners
GROUP BY size
ORDER BY size DESC;
